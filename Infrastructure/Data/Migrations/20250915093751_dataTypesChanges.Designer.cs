// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(TrapDbContext))]
    [Migration("20250915093751_dataTypesChanges")]
    partial class dataTypesChanges
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Entities.Auth.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<string>("LockReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("ParentUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ParentUserId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Core.Entities.Lookups.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Afaq"
                        });
                });

            modelBuilder.Entity("Core.Entities.Lookups.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeZoneName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UtcOffsetMinutes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Countries", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Egypt",
                            TimeZoneName = "Africa/Cairo",
                            UtcOffsetMinutes = 120
                        },
                        new
                        {
                            Id = 2,
                            Name = "Saudi Arabia",
                            TimeZoneName = "Asia/Riyadh",
                            UtcOffsetMinutes = 180
                        },
                        new
                        {
                            Id = 3,
                            Name = "United Arab Emirates",
                            TimeZoneName = "Asia/Dubai",
                            UtcOffsetMinutes = 240
                        },
                        new
                        {
                            Id = 4,
                            Name = "Qatar",
                            TimeZoneName = "Asia/Qatar",
                            UtcOffsetMinutes = 180
                        });
                });

            modelBuilder.Entity("Core.Entities.Lookups.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("States", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            Name = "Cairo"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 1,
                            Name = "Alexandria"
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 1,
                            Name = "Giza"
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 1,
                            Name = "Damietta"
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 1,
                            Name = "Port Said"
                        },
                        new
                        {
                            Id = 6,
                            CountryId = 1,
                            Name = "Suez"
                        },
                        new
                        {
                            Id = 7,
                            CountryId = 1,
                            Name = "Aswan"
                        },
                        new
                        {
                            Id = 8,
                            CountryId = 1,
                            Name = "Luxor"
                        },
                        new
                        {
                            Id = 9,
                            CountryId = 1,
                            Name = "Qena"
                        },
                        new
                        {
                            Id = 10,
                            CountryId = 1,
                            Name = "Sohag"
                        },
                        new
                        {
                            Id = 11,
                            CountryId = 1,
                            Name = "Ismailia"
                        },
                        new
                        {
                            Id = 12,
                            CountryId = 1,
                            Name = "Menofia"
                        },
                        new
                        {
                            Id = 13,
                            CountryId = 1,
                            Name = "Qalyubia"
                        },
                        new
                        {
                            Id = 14,
                            CountryId = 1,
                            Name = "Sharqia"
                        },
                        new
                        {
                            Id = 15,
                            CountryId = 1,
                            Name = "Beheira"
                        },
                        new
                        {
                            Id = 16,
                            CountryId = 1,
                            Name = "Fayoum"
                        },
                        new
                        {
                            Id = 17,
                            CountryId = 1,
                            Name = "Minya"
                        },
                        new
                        {
                            Id = 18,
                            CountryId = 1,
                            Name = "Asyut"
                        },
                        new
                        {
                            Id = 19,
                            CountryId = 1,
                            Name = "Dakahlia"
                        },
                        new
                        {
                            Id = 20,
                            CountryId = 1,
                            Name = "Matruh"
                        },
                        new
                        {
                            Id = 21,
                            CountryId = 1,
                            Name = "Beni Suef"
                        },
                        new
                        {
                            Id = 22,
                            CountryId = 1,
                            Name = "Red Sea"
                        },
                        new
                        {
                            Id = 23,
                            CountryId = 1,
                            Name = "North Sinai"
                        },
                        new
                        {
                            Id = 24,
                            CountryId = 1,
                            Name = "South Sinai"
                        },
                        new
                        {
                            Id = 26,
                            CountryId = 2,
                            Name = "Riyadh"
                        },
                        new
                        {
                            Id = 27,
                            CountryId = 2,
                            Name = "Jeddah"
                        },
                        new
                        {
                            Id = 28,
                            CountryId = 2,
                            Name = "Mecca"
                        },
                        new
                        {
                            Id = 29,
                            CountryId = 2,
                            Name = "Medina"
                        },
                        new
                        {
                            Id = 30,
                            CountryId = 2,
                            Name = "Dammam"
                        },
                        new
                        {
                            Id = 31,
                            CountryId = 2,
                            Name = "Khobar"
                        },
                        new
                        {
                            Id = 32,
                            CountryId = 2,
                            Name = "Tabuk"
                        },
                        new
                        {
                            Id = 33,
                            CountryId = 2,
                            Name = "Hail"
                        },
                        new
                        {
                            Id = 34,
                            CountryId = 2,
                            Name = "Qassim"
                        },
                        new
                        {
                            Id = 35,
                            CountryId = 2,
                            Name = "Najran"
                        },
                        new
                        {
                            Id = 36,
                            CountryId = 2,
                            Name = "Jizan"
                        },
                        new
                        {
                            Id = 37,
                            CountryId = 2,
                            Name = "Asir"
                        },
                        new
                        {
                            Id = 38,
                            CountryId = 2,
                            Name = "Al Bahah"
                        },
                        new
                        {
                            Id = 39,
                            CountryId = 2,
                            Name = "Northern Borders"
                        },
                        new
                        {
                            Id = 40,
                            CountryId = 2,
                            Name = "Jouf"
                        },
                        new
                        {
                            Id = 41,
                            CountryId = 3,
                            Name = "Dubai"
                        },
                        new
                        {
                            Id = 42,
                            CountryId = 3,
                            Name = "Abu Dhabi"
                        },
                        new
                        {
                            Id = 43,
                            CountryId = 3,
                            Name = "Sharjah"
                        },
                        new
                        {
                            Id = 44,
                            CountryId = 3,
                            Name = "Ajman"
                        },
                        new
                        {
                            Id = 45,
                            CountryId = 3,
                            Name = "Umm Al-Quwain"
                        },
                        new
                        {
                            Id = 46,
                            CountryId = 3,
                            Name = "Fujairah"
                        },
                        new
                        {
                            Id = 47,
                            CountryId = 3,
                            Name = "Ras Al Khaimah"
                        },
                        new
                        {
                            Id = 48,
                            CountryId = 4,
                            Name = "Doha"
                        },
                        new
                        {
                            Id = 49,
                            CountryId = 4,
                            Name = "Al Wakrah"
                        },
                        new
                        {
                            Id = 50,
                            CountryId = 4,
                            Name = "Al Khor"
                        },
                        new
                        {
                            Id = 51,
                            CountryId = 4,
                            Name = "Mesaieed"
                        },
                        new
                        {
                            Id = 52,
                            CountryId = 4,
                            Name = "Al Rayyan"
                        },
                        new
                        {
                            Id = 53,
                            CountryId = 4,
                            Name = "Al Daayen"
                        },
                        new
                        {
                            Id = 54,
                            CountryId = 4,
                            Name = "Umm Salal"
                        });
                });

            modelBuilder.Entity("Core.Entities.ReadDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BigBattery")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Co2")
                        .HasColumnType("int");

                    b.Property<string>("Co2Val")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Counter")
                        .HasColumnType("int");

                    b.Property<int>("Fan")
                        .HasColumnType("int");

                    b.Property<bool>("IsClean")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDone")
                        .HasColumnType("bit");

                    b.Property<int>("ReadingFly")
                        .HasColumnType("int");

                    b.Property<string>("ReadingHumidty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReadingLarg")
                        .HasColumnType("int");

                    b.Property<string>("ReadingLat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReadingLng")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReadingMosuqitoes")
                        .HasColumnType("int");

                    b.Property<int>("ReadingSmall")
                        .HasColumnType("int");

                    b.Property<string>("ReadingTempIn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReadingTempOut")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReadingWindSpeed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmallBattery")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.Property<int>("TrapReadId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrapReadId");

                    b.HasIndex("Time", "TrapReadId")
                        .IsUnique();

                    b.ToTable("ReadDetails", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Trap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BigBattery")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<int?>("Fan")
                        .HasColumnType("int");

                    b.Property<string>("FileDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Iema")
                        .HasColumnType("int");

                    b.Property<bool>("IsCounterOn")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCounterReadingFromSimCard")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNew")
                        .HasColumnType("bit");

                    b.Property<bool>("IsScheduleOn")
                        .HasColumnType("bit");

                    b.Property<bool>("IsThereEmergency")
                        .HasColumnType("bit");

                    b.Property<string>("LastLat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastLong")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Long")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReadingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SmallBattery")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.Property<int>("TrapStatus")
                        .HasColumnType("int");

                    b.Property<int?>("ValveQut")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CountryId");

                    b.HasIndex("SerialNumber")
                        .HasFilter("[SerialNumber] IS NOT NULL");

                    b.ToTable("Traps", (string)null);
                });

            modelBuilder.Entity("Core.Entities.TrapCounterSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ScdTime")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("TrapId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrapId");

                    b.ToTable("TrapCounterSchedules", (string)null);
                });

            modelBuilder.Entity("Core.Entities.TrapEmergency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EmergencyStatus")
                        .HasColumnType("bit");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Lat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Long")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TrapId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrapId");

                    b.ToTable("TrapEmergency");
                });

            modelBuilder.Entity("Core.Entities.TrapFanSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ScdTime")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("TrapId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrapId");

                    b.ToTable("TrapFanSchedules", (string)null);
                });

            modelBuilder.Entity("Core.Entities.TrapRead", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<DateOnly>("ServerCreationDate")
                        .HasColumnType("date");

                    b.Property<int>("TrapId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrapId", "Date")
                        .IsUnique();

                    b.ToTable("TrapReads", (string)null);
                });

            modelBuilder.Entity("Core.Entities.TrapValveQutSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ScdTime")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("TrapId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrapId");

                    b.ToTable("TrapValveQutSchedules", (string)null);
                });

            modelBuilder.Entity("Core.Entities.UserTraps", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("TrapId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TrapId");

                    b.HasIndex("UserId", "TrapId")
                        .IsUnique();

                    b.ToTable("UserTraps", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Auth.User", b =>
                {
                    b.HasOne("Core.Entities.Auth.User", "ParentUser")
                        .WithMany("Children")
                        .HasForeignKey("ParentUserId");

                    b.Navigation("ParentUser");
                });

            modelBuilder.Entity("Core.Entities.Lookups.State", b =>
                {
                    b.HasOne("Core.Entities.Lookups.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Core.Entities.ReadDetails", b =>
                {
                    b.HasOne("Core.Entities.TrapRead", "TrapRead")
                        .WithMany("readDetails")
                        .HasForeignKey("TrapReadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrapRead");
                });

            modelBuilder.Entity("Core.Entities.Trap", b =>
                {
                    b.HasOne("Core.Entities.Lookups.Category", "Category")
                        .WithMany("Traps")
                        .HasForeignKey("CategoryId");

                    b.HasOne("Core.Entities.Lookups.Country", "Country")
                        .WithMany("Traps")
                        .HasForeignKey("CountryId");

                    b.HasOne("Core.Entities.Lookups.State", "State")
                        .WithMany("Traps")
                        .HasForeignKey("CountryId");

                    b.Navigation("Category");

                    b.Navigation("Country");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Core.Entities.TrapCounterSchedule", b =>
                {
                    b.HasOne("Core.Entities.Trap", "Trap")
                        .WithMany("TrapCounterSchedules")
                        .HasForeignKey("TrapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trap");
                });

            modelBuilder.Entity("Core.Entities.TrapEmergency", b =>
                {
                    b.HasOne("Core.Entities.Trap", "Trap")
                        .WithMany("TrapEmergencies")
                        .HasForeignKey("TrapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trap");
                });

            modelBuilder.Entity("Core.Entities.TrapFanSchedule", b =>
                {
                    b.HasOne("Core.Entities.Trap", "Trap")
                        .WithMany("TrapFanSchedules")
                        .HasForeignKey("TrapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trap");
                });

            modelBuilder.Entity("Core.Entities.TrapRead", b =>
                {
                    b.HasOne("Core.Entities.Trap", "Trap")
                        .WithMany("trapReads")
                        .HasForeignKey("TrapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trap");
                });

            modelBuilder.Entity("Core.Entities.TrapValveQutSchedule", b =>
                {
                    b.HasOne("Core.Entities.Trap", "Trap")
                        .WithMany("TrapValveQutSchedules")
                        .HasForeignKey("TrapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trap");
                });

            modelBuilder.Entity("Core.Entities.UserTraps", b =>
                {
                    b.HasOne("Core.Entities.Trap", "Trap")
                        .WithMany("UserTraps")
                        .HasForeignKey("TrapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Auth.User", "User")
                        .WithMany("UserTraps")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trap");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Core.Entities.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Core.Entities.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Core.Entities.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Auth.User", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("UserTraps");
                });

            modelBuilder.Entity("Core.Entities.Lookups.Category", b =>
                {
                    b.Navigation("Traps");
                });

            modelBuilder.Entity("Core.Entities.Lookups.Country", b =>
                {
                    b.Navigation("States");

                    b.Navigation("Traps");
                });

            modelBuilder.Entity("Core.Entities.Lookups.State", b =>
                {
                    b.Navigation("Traps");
                });

            modelBuilder.Entity("Core.Entities.Trap", b =>
                {
                    b.Navigation("TrapCounterSchedules");

                    b.Navigation("TrapEmergencies");

                    b.Navigation("TrapFanSchedules");

                    b.Navigation("TrapValveQutSchedules");

                    b.Navigation("UserTraps");

                    b.Navigation("trapReads");
                });

            modelBuilder.Entity("Core.Entities.TrapRead", b =>
                {
                    b.Navigation("readDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
